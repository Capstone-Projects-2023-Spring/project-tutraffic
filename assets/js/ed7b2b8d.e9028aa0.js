"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3961],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var i=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=i.createContext({}),p=function(e){var t=i.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(a),u=n,m=d["".concat(l,".").concat(u)]||d[u]||g[u]||r;return a?i.createElement(m,s(s({ref:t},c),{},{components:a})):i.createElement(m,s({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:n,s[1]=o;for(var p=2;p<r;p++)s[p]=a[p];return i.createElement.apply(null,s)}return i.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5531:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=a(7462),n=(a(7294),a(3905));const r={sidebar_position:1,description:"Design Document - Par I Architecture"},s="Design",o={unversionedId:"system-architecture/design",id:"system-architecture/design",title:"Design",description:"Design Document - Par I Architecture",source:"@site/docs/system-architecture/design.md",sourceDirName:"system-architecture",slug:"/system-architecture/design",permalink:"/project-tutraffic/docs/system-architecture/design",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-tutraffic/edit/main/documentation/docs/system-architecture/design.md",tags:[],version:"current",lastUpdatedBy:"Brian Rangel",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Design Document - Par I Architecture"},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-tutraffic/docs/category/system-architecture"},next:{title:"API Specification",permalink:"/project-tutraffic/docs/category/api-specification"}},l={},p=[{value:"Components",id:"components",level:3},{value:"Figure 1 - Mobile App Wireframe",id:"figure-1---mobile-app-wireframe",level:5},{value:"Figure 2.1 - Frontend Application Class Diagram",id:"figure-21---frontend-application-class-diagram",level:5},{value:"Figure 2.2 - Backend Flowchart",id:"figure-22---backend-flowchart",level:5},{value:"Figure 2.3 - Database Class Diagram",id:"figure-23---database-class-diagram",level:5},{value:"Figure 2.4 - Raspberry Pi Class Diagram",id:"figure-24---raspberry-pi-class-diagram",level:5},{value:"Sequence Diagrams",id:"sequence-diagrams",level:3},{value:"Algorithms",id:"algorithms",level:3},{value:"Figure 3.1 - YOLO diagram",id:"figure-31---yolo-diagram",level:5},{value:"State Diagrams",id:"state-diagrams",level:3},{value:"Figure 4.1 - Client State Diagram",id:"figure-41---client-state-diagram",level:5},{value:"Figure 4.2 - Server State Diagram",id:"figure-42---server-state-diagram",level:5},{value:"Figure 4.3 - Raspberry Pi Node State Diagram",id:"figure-43---raspberry-pi-node-state-diagram",level:4},{value:"Database",id:"database",level:3},{value:"Figure 5.1 - Database Entity-Relation Diagram",id:"figure-51---database-entity-relation-diagram",level:5}],c={toc:p};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"design"},"Design"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Purpose")),(0,n.kt)("p",null,"The Design Document - Part I Architecture describes the software architecture and how the requirements are mapped into the design. This document will be a combination of diagrams and text that describes what the diagrams are showing."),(0,n.kt)("h3",{id:"components"},"Components"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Client")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Basic Wireframe",src:a(3549).Z,width:"828",height:"786"})),(0,n.kt)("h5",{id:"figure-1---mobile-app-wireframe"},"Figure 1 - Mobile App Wireframe"),(0,n.kt)("p",null,"Figure 1 shows a mockup wireframe of the TuTraffic mobile application."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This is an android application that will require the use of 3 main pages with adjacent xml files and adapters for each view used. "),(0,n.kt)("li",{parentName:"ul"},"The client will be connected to the server via built in functionality within android studio and google cloud. These classes are autogenerated by android studio and are shown as RegisterActivity and DeviceInfoEndpoint respectively. ")),(0,n.kt)("mermaid",{value:"classDiagram\nMainApp --\x3e mapPage\nMainApp : onCreate()\nmapPage : onCreate()\nmapPage : val map\nmapPage : val button\nmapPage : val navbar\nMainApp --\x3e filterPage\nfilterPage : onCreate()\nfilterPage : val Distance\nfilterPage : val RadioButtonDistance\nfilterPage : val Size\nfilterPage : val RadioButtonSize\nfilterPage : val Cost\nfilterPage : val RadioButtonCost\nMainApp --\x3e profilePage \nprofilePage : val name\nprofilePage : val accountName\nprofilePage : val email\nprofilePage : val DOB\nprofilePage : onCreate()\nmapPage --\x3e mapAdapter \nmapAdapter : onCreate()\nmapAdapter : onStart()\nmapAdapter : onResume()\nmapAdapter : onPause()\nmapAdapter : onStop()\nmapAdapter : onDestroy()\nmapAdapter : onSaveInstanceState()\nmapAdapter : onLowMemory()\nnavBarAdapter <-- mapPage\nnavBarAdapter <-- filterPage\nnavBarAdapter <-- profilePage\nnavBarAdapter : onItemSelected()\nnavBarAdapter : onItemNotSelected()\nfilterPage  --\x3e DistanceAdapter\nDistanceAdapter : getCount()\nDistanceAdapter : getItem()\nDistanceAdapter : getItemId()\nDistanceAdapter : getView()\nfilterPage  --\x3e VehicleSizeAdapter\nVehicleSizeAdapter : getCount()\nVehicleSizeAdapter : getItem()\nVehicleSizeAdapter : getItemId()\nVehicleSizeAdapter : getView()\nfilterPage  --\x3e CostAdapter\nCostAdapter : getCount()\nCostAdapter : getItem()\nCostAdapter : getItemId()\nCostAdapter : getView()\nRegisterActivity <--\x3e DeviceInfoEndpoint\nDeviceInfoEndpoint: Autogenerated (Server Side)\nMainApp <--\x3e RegisterActivity \nRegisterActivity: Autogenerated (Client Side)\nmapPage <--\x3e activity_map_xml\nactivity_map_xml : View map\nactivity_map_xml : View editText\nactivity_map_xml : View button\nactivity_map_xml : View navbar\nactivity_map_xml : View logo\nfilterPage <--\x3e activity_filter_xml\nactivity_filter_xml : View distance\nactivity_filter_xml : View RadioButtonDistance\nactivity_filter_xml : View Size\nactivity_filter_xml : View RadioButtonSize\nactivity_filter_xml : View cost\nactivity_filter_xml : View RadioButtonCost\nactivity_filter_xml : View title\nactivity_filter_xml : View logo\nactivity_filter_xml : View navbar\nprofilePage <--\x3e acitivity_profile_xml\nacitivity_profile_xml : View name\nacitivity_profile_xml : View email\nacitivity_profile_xml : View accName\nacitivity_profile_xml : View DOB\nacitivity_profile_xml : View navbar\nacitivity_profile_xml : View logo\n    "}),(0,n.kt)("h5",{id:"figure-21---frontend-application-class-diagram"},"Figure 2.1 - Frontend Application Class Diagram"),(0,n.kt)("p",null,"Figure 2.1 shows the class diagram of TuTraffic's application and all the components that make up the frontend."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Server")),(0,n.kt)("p",null,"The server will be hosted in Google Cloud with containers for the Customer database, and Parking database. "),(0,n.kt)("mermaid",{value:"flowchart TD\n    A[Container Manager] --\x3e B[Customer Database]--\x3eD[User Location]\n    A[Container Manager] --\x3e C[Parking Database]"}),(0,n.kt)("h5",{id:"figure-22---backend-flowchart"},"Figure 2.2 - Backend Flowchart"),(0,n.kt)("p",null,"Figure 2.2 illustrates the flow of components that make up the backend, highlighting the communcation between the server and the databases."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Database")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Uses Firebase to save customer information, location and availbe parking spots. "),(0,n.kt)("li",{parentName:"ul"},"Customer table contains CustomerId as the primary key, customer's email and password, and two foreign keys LocationId and ParkingSpotId. "),(0,n.kt)("li",{parentName:"ul"},"Path from CustomerInfo to Location table has LocationId as the primary key and also the user's longitude and latitude. "),(0,n.kt)("li",{parentName:"ul"},"Path from CustomerInfo to ParkingSpot, which had spotLocationId as the primary key and also the parkings spot's longitude, latitude, price and availability. ")),(0,n.kt)("mermaid",{value:"classDiagram\n    Customer -- Location\n    Customer -- ParkingSpot\n    class Customer{\n        +String userName\n        +String email\n        +string password\n        +int customerId\n        +int locationId\n        +int parkingLocationId\n        +findParkingSpot()\n    }\n    class Location{\n        +int locationId\n        -int lat\n        -int long\n    }\n    class ParkingSpot{\n        +int spotLocationId\n        -int lat\n        -int long\n        +int price\n        +boolean availability\n    }"}),(0,n.kt)("h5",{id:"figure-23---database-class-diagram"},"Figure 2.3 - Database Class Diagram"),(0,n.kt)("p",null,"Figure 2.3 shows the class diagram of the different data fields stored in the TuTraffic database."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Raspberry Pi")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A camera is attached to the Raspberry Pi that sends it images. The Pi runs code on itself to process the images then sends the gathered data to the server."),(0,n.kt)("li",{parentName:"ul"},"No images are sent to the server, only the data detected from them.")),(0,n.kt)("mermaid",{value:"classDiagram\n    DetectCars -- DetectParking\n    Detect Lines -- DetectParking\n    class DetectCars{\n        +String config\n        +String classes\n        +String weights\n        +cropImage(String image)\n        +get_output_layers(String net)\n        +draw_prediciton(String image, int class_id, int confidence)\n    }\n    class DetectLines{\n        +Img edges\n        +Int[] lines\n        +Img image\n        +detectLines(Img image)\n    }\n    class DetectParking{\n        +int numberOfSpots\n        +int[] location\n        +String[] size\n        +detectParking()\n    }"}),(0,n.kt)("h5",{id:"figure-24---raspberry-pi-class-diagram"},"Figure 2.4 - Raspberry Pi Class Diagram"),(0,n.kt)("p",null,"Figure 2.4 illustrates the class diagram of the code run on the Raspberry Pi after an image is sent to it from its camera."),(0,n.kt)("h3",{id:"sequence-diagrams"},"Sequence Diagrams"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Use Case #1"),": A user knows their destination and wants to find a spot in its general vicinity."),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Use Case 1 Description"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Upon opening the TuTraffic application, the user opens the ",(0,n.kt)("em",{parentName:"li"},"parking options")," page, a page that acts as the settings for the users parking preferences and needs."),(0,n.kt)("li",{parentName:"ol"},"In the ",(0,n.kt)("em",{parentName:"li"},"range")," subsection of the parking options page, the user can adjust the range of how far they are willing to park in the area surrounding from their destination. "),(0,n.kt)("li",{parentName:"ol"},"The user clicks ",(0,n.kt)("em",{parentName:"li"},"save")," and exits the parking options page to return to the home screen."),(0,n.kt)("li",{parentName:"ol"},"On the home screen, the user can click the ",(0,n.kt)("em",{parentName:"li"},"search")," button to enter the address of their destination."),(0,n.kt)("li",{parentName:"ol"},"The TuTraffic application displays a map of the detected spots in the saved range of the destination to the user's device."))),(0,n.kt)("mermaid",{value:"\nsequenceDiagram\n    actor u as User\n    participant m as Mobile Application\n    participant c as Cloud\n    participant d as Database\n    u ->> m: Open parking options page\n    activate m \n    u ->> m: Adjust range preferences\n    m ->> c: Range preferences\n    deactivate m\n    activate c \n    c ->> d: Range preferences\n    activate d \n    d ->> d: Update dataset\n    d --\x3e> c: Dataset of parking spots in range\n    deactivate d\n    c --\x3e> m: Dataset in readable form\n    deactivate c\n    activate m\n    m ->> m: Process dataset\n    m --\x3e> u: Display\n    deactivate m\n"}),(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Use Case #2"),": A user wants to update their personal parking options to reflect how much they are willing to pay per hour for street parking."),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Use Case 2 Description"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The user logs into their account on the TuTraffic application."),(0,n.kt)("li",{parentName:"ol"},"The user opens parking options, where their saved preferences are stored."),(0,n.kt)("li",{parentName:"ol"},"In the ",(0,n.kt)("em",{parentName:"li"},"parking type")," subsection of the parking options page, the user removes parking garages and paid lots from their preferred list."),(0,n.kt)("li",{parentName:"ol"},"In the ",(0,n.kt)("em",{parentName:"li"},"per hour")," subsection of the parking options page, the user edits their accepted hourly price range, reflecting how much they are willing to pay per hour."),(0,n.kt)("li",{parentName:"ol"},"The user clicks ",(0,n.kt)("em",{parentName:"li"},"save")," and exits the parking options page to return to the home screen, where only street parking that is less than or equal to their budget will appear on the map."))),(0,n.kt)("mermaid",{value:"\nsequenceDiagram\n    actor u as User\n    participant m as Mobile Application\n    participant c as Cloud\n    participant d as Database\n    u ->> m: Log in\n    activate m \n    m->>d: Request user data\n    activate d\n    d--\x3e>m: User data\n    deactivate d\n    u ->> m: Open parking options page\n    u ->> m: Disable parking garages and paid lots\n    m ->> c: Pricing preferences\n    deactivate m\n    activate c \n    c ->> d: Pricing preferences\n    activate d \n    d ->> d: Update dataset\n    d --\x3e> c: Dataset of parking spots in price range\n    deactivate d\n    c --\x3e> m: Dataset in readable form\n    deactivate c\n    activate m\n    m ->> m: Process dataset\n    m --\x3e> u: Display\n    deactivate m\n"}),(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Use Case #3"),": A user wants to indicate their car size as to only be shown parking spaces that are likely to fit their car."),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Use Case 3 Description"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"A logged in user opens the parking options page."),(0,n.kt)("li",{parentName:"ol"},"In the ",(0,n.kt)("em",{parentName:"li"},"car size")," subsection of the parking options page, the user selects the option that best reflects the size of their car from a dropdown menu: small, medium, or large."),(0,n.kt)("li",{parentName:"ol"},"The user clicks ",(0,n.kt)("em",{parentName:"li"},"save"),"."),(0,n.kt)("li",{parentName:"ol"},"The TuTraffic application sends a message to the server to communicate the unique size need."),(0,n.kt)("li",{parentName:"ol"},"The server requests this information of parking spots of a particular size to the database."),(0,n.kt)("li",{parentName:"ol"},"The database, which continuously receives data from the Raspberry Pi node of parking spots and their location and size, sends the appropriate information back to the server."),(0,n.kt)("li",{parentName:"ol"},"Now, when the user searches for spots, only parking spots that have been detected to likely fit at least their size will appear. "))),(0,n.kt)("mermaid",{value:'\nsequenceDiagram\n    actor u as User\n    participant t as TuTraffic App\n    participant s as Server\n    participant c as Camera\n    participant p as Raspberry pi\n    participant d as Database\n    activate u\n    activate c \n    c ->> p: Sends images to be processed\n    activate p\n    deactivate c \n    p ->> d: Sends data of parkings spots with their location and size\n    activate d\n    deactivate p\n    u ->>+ t: Opens parking options\n    t --\x3e> u: Displays dropdown menu of car size options\n    u ->> t: Selects "size" of vehicle\n    t ->>+ s: Requests parking data for "size"\n    s ->> d: Requests parking data for "size"\n    d --\x3e> s: Return approproate parking data\n    s --\x3e> t: Return parking data\n    t --\x3e> u: Display parking data for "size"\n    deactivate u\n'}),(0,n.kt)("br",null),(0,n.kt)("br",null),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Use Case #4"),": A user wants be directed to a parking spot after selecting it."),(0,n.kt)("details",null,(0,n.kt)("summary",null,"Use Case 4 Description"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"After opening the TuTraffic application, the user clicks the ",(0,n.kt)("em",{parentName:"li"},"search")," button to find parking spots."),(0,n.kt)("li",{parentName:"ol"},"The user enters their destination's address."),(0,n.kt)("li",{parentName:"ol"},"The TuTraffic application displays the detected spots to the user's device."),(0,n.kt)("li",{parentName:"ol"},"After browsing, the user selects on a parking spot and clicks the ",(0,n.kt)("em",{parentName:"li"},"route")," button."),(0,n.kt)("li",{parentName:"ol"},"The Google Maps API is loaded to direct the user to their destination."))),(0,n.kt)("mermaid",{value:'\nsequenceDiagram\n    actor u as User\n    participant t as TuTraffic App\n    participant s as Server\n    participant d as Database\n    participant g as Google Maps API\n    activate u\n    u ->>+ t: Clicks search button\n    t --\x3e> u: Prompts to enter destination address\n    u ->> t: Enter address\n    t ->>+ s: Requests parking data for "destination"\n    s ->>+ d: Requests parking data for "destination"\n    d --\x3e>- s: Return parking data for "destination"\n    s --\x3e>- t: Return parking data for "destination"\n    t --\x3e> u: Display parking data for "destination"\n    u ->> t: Selects parking spot and request route\n    t ->>+ g: Requests navigation directions to the parking spot\n    g --\x3e>- t: Sends navigation directions to the parking spot\n    t --\x3e>- u: Direct navigation directions\n    deactivate u\n'}),(0,n.kt)("h3",{id:"algorithms"},"Algorithms"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Computer Vision")),(0,n.kt)("p",null,'The Raspberry Pi nodes utilized for this product are equipped with cameras that will take photos at fixed intervals in order to be sending up-to-date data to the server. To ensure real-time processing so users will not be presented with inaccurate information, the Raspberry Pi will take and process multiple images a minute. When a Raspberry Pi node takes a photo, the photo will be edited and processed through a computer vision algorithm hosted on the Raspberry Pi itself. Computer vision is a subfield of machine learning, meant to view images and replicate the human thought process to make a decision based on what it "sees".'),(0,n.kt)("p",null,"Currently, the computer vision aspect of TuTraffic is being developed with the detection algorithm YOLO. YOLO is a relatively fast object detection algorithm as it utilizes a one-stage detector strategy - this means as opposed to other much slower algorithms, YOLO looks at an image only once and goes through its entire network one time to determine if objects it has been trained to detect are present. YOLO is run on OpenCV, an open source computer vision/machine learning software library. One of the classes in YOLO's detectable objects list are cars - car detection will be a necessary tool in detecting parking spots on streets."),(0,n.kt)("p",null,"TuTraffic detects both street parking and parking in traditional parking lots. YOLO's car detection is the biggest component of street parking, while OpenCV's built in line detection is the biggest component for parking spots in a parking lot. OpenCV has a fast line detection algorithm built into its library and does not require the use of any additional object detection algorithms. YOLO's car detection and OpenCV's line detection will work together to detect parking spots in both environments.  "),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Computer vision diagram",src:a(5393).Z,width:"1236",height:"476"})),(0,n.kt)("h5",{id:"figure-31---yolo-diagram"},"Figure 3.1 - YOLO diagram"),(0,n.kt)("p",null,"Figure 3.1 shows the process an image goes through and its output when ran through the YOLO object detection algorithm supported by OpenCV. The original image is first transformed into a blob format to be read by the network. YOLO then completes two steps - one surrounding the blob in boxes of different thickness to indicate confidence of an object being present, and the other adding a colored probability map over the image to indicate the objects the algorithm believes exists in those locations. The bounding boxes and probability map are combined to create the final image, boxes surrounding the detected objects with their label & probability. "),(0,n.kt)("h3",{id:"state-diagrams"},"State Diagrams"),(0,n.kt)("mermaid",{value:"---\ntitle: Client State Diagram\n---\nstateDiagram-v2\n[*] --\x3e Searching\nSearching --\x3e Requesting\nRequesting --\x3e Searching\nSearching --\x3e Viewing: Select Parking Location\nViewing --\x3e Navigation\nViewing --\x3e Requesting\nRequesting --\x3e Viewing\nNavigation --\x3e Viewing\nViewing --\x3e Searching"}),(0,n.kt)("h5",{id:"figure-41---client-state-diagram"},"Figure 4.1 - Client State Diagram"),(0,n.kt)("p",null,"Figure 4.1 shows the state diagram of the frontend application, describing the different behaviors of the TuTraffic application."),(0,n.kt)("p",null,"The TuTraffic client application experiences multiple states throughout its usage. As depicted in the figure above, its first state is Searching: in this state, the client displays a list of nearby parking spaces, which may be initially empty. The client enters the Viewing state after the user selects a parking location; they can return to the Searching state to view the other locations, or enter the Navigation state. In either the Searching or Viewing State, the client submits requests to the server, such as parking status updates or reservations, in the Requesting state before returning to the previous state. In the Navigation state, the client connects to a third party navigation service and receives real-time driving assistance to help them reach their selected parking location. After the client reaches their destination or ceases navigation, the application returns to the Viewing state."),(0,n.kt)("mermaid",{value:"---\ntitle: Server State Diagram\n---\nstateDiagram-v2\n[*] --\x3e Waiting\nWaiting --\x3e Handling\nHandling --\x3e Reading\nHandling --\x3e Writing\nReading --\x3e Replying\nWriting --\x3e Replying\nReading --\x3e Writing\nWriting --\x3e Reading\nReplying --\x3e Waiting"}),(0,n.kt)("h5",{id:"figure-42---server-state-diagram"},"Figure 4.2 - Server State Diagram"),(0,n.kt)("p",null,"Figure 4.2 shows the state diagram of the backend server, exhibiting the different modes the server may be acting in."),(0,n.kt)("p",null,"The figure above illustrates the server states of the TuTraffic system. The server starts in the Waiting state; it is idle while there are no jobs to complete. When it receives a request from a client or node, the server proceeds to the Handling state, in which it comprehends the request. Then, the server enters a Reading or Writing state to handle the reading or writing operations, respectively, that are necessary to fulfill the request. For example, a search query is primarily a reading operation, while a parking reservation request is primarily a writing operation. Finally, the server formulates a response, delivers the message in the Replying state, and returns to the Waiting state before the next job."),(0,n.kt)("mermaid",{value:"---\ntitle: Node State Diagram\n---\nstateDiagram-v2\n[*] --\x3e Waiting\nWaiting --\x3e Capturing\nCapturing --\x3e Processing\nProcessing --\x3e Sending\nSending --\x3e Waiting"}),(0,n.kt)("h4",{id:"figure-43---raspberry-pi-node-state-diagram"},"Figure 4.3 - Raspberry Pi Node State Diagram"),(0,n.kt)("p",null,"Figure 4.3 shows the state diagram of the Raspberry Pi node as it cycles through different behaviors."),(0,n.kt)("p",null,"Each Raspberry Pi node in the TuTraffic system begins in the Waiting state, as shown in the above state diagram. The node exits this Waiting state on a regular schedule or upon request, then enters the Capturing state, during which it records an image. The node proceeds to the Processing state, in which computer vision is used to produce a parking location update message. This update is pushed to the server during the Sending state, then the node resumes the Waiting state."),(0,n.kt)("h3",{id:"database"},"Database"),(0,n.kt)("mermaid",{value:"---\ntitle: Entity-Relation Diagram\n---\nerDiagram\n    CUSTOMER }|..|{ Locations : has\n    CUSTOMER ||--o{ ParkingSpot : recieves\n    CUSTOMER {\n        int customerId\n        string email\n        string password\n        int locationID\n        int spotId\n    }\n    Locations{\n        int locationId\n        int long\n        int lat\n    }\n    ParkingSpot{\n        int spotId\n        int long\n        int lat\n        int price\n        boolean availability\n    }"}),(0,n.kt)("h5",{id:"figure-51---database-entity-relation-diagram"},"Figure 5.1 - Database Entity-Relation Diagram"),(0,n.kt)("p",null,"Figure 5.1 shows the relationship between the different entities of TuTraffic's database."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Table Design")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Customer Table: This table contain customer information including, email and password. The primary key is customerId. Contains 2 foreign keys locationId and spotID"),(0,n.kt)("li",{parentName:"ul"},"Location Table: This table updates in realtime with users longitude and latitude. The primary key is locationId."),(0,n.kt)("li",{parentName:"ul"},"ParkingSpot Table: This table contains the parking spots location, availability and longitude and latitude. Primary key is the spotId")))}d.isMDXComponent=!0},5393:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/computer_vision_diagram-f2ecfa228fcfcf45e2f5fa56f83b3b5e.png"},3549:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/wireframe-05f5aa4ff2e47e89cae3ca7eca49b503.png"}}]);