"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3961],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(a),m=i,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return a?n.createElement(g,s(s({ref:t},c),{},{components:a})):n.createElement(g,s({ref:t},c))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5531:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:1,description:"Design Document - Par I Architecture"},s="Design",o={unversionedId:"system-architecture/design",id:"system-architecture/design",title:"Design",description:"Design Document - Par I Architecture",source:"@site/docs/system-architecture/design.md",sourceDirName:"system-architecture",slug:"/system-architecture/design",permalink:"/project-tutraffic/docs/system-architecture/design",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-tutraffic/edit/main/documentation/docs/system-architecture/design.md",tags:[],version:"current",lastUpdatedBy:"Brian Rangel",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Design Document - Par I Architecture"},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-tutraffic/docs/category/system-architecture"},next:{title:"API Specification",permalink:"/project-tutraffic/docs/category/api-specification"}},l={},p=[{value:"Components",id:"components",level:3},{value:"Sequence Diagrams",id:"sequence-diagrams",level:3},{value:"Algorithms",id:"algorithms",level:3},{value:"State Diagrams",id:"state-diagrams",level:3},{value:"Database",id:"database",level:3}],c={toc:p};function d(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"design"},"Design"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Purpose")),(0,i.kt)("p",null,"The Design Document - Part I Architecture describes the software architecture and how the requirements are mapped into the design. This document will be a combination of diagrams and text that describes what the diagrams are showing."),(0,i.kt)("h3",{id:"components"},"Components"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Client")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Basic Wireframe",src:a(3549).Z,width:"828",height:"786"})),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Figure. Client Wireframe")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This is an android application that will require the use of 3 main pages with adjacent xml files and adapters for each view used. "),(0,i.kt)("li",{parentName:"ul"},"The client will be connected to the server via built in functionality within android studio and google cloud. These classes are autogenerated by android studio and are shown as RegisterActivity and DeviceInfoEndpoint respectively. ")),(0,i.kt)("mermaid",{value:"classDiagram\nMainApp --\x3e mapPage\nMainApp : onCreate()\nmapPage : onCreate()\nmapPage : val map\nmapPage : val button\nmapPage : val navbar\nMainApp --\x3e filterPage\nfilterPage : onCreate()\nfilterPage : val Distance\nfilterPage : val RadioButtonDistance\nfilterPage : val Size\nfilterPage : val RadioButtonSize\nfilterPage : val Cost\nfilterPage : val RadioButtonCost\nMainApp --\x3e profilePage \nprofilePage : val name\nprofilePage : val accountName\nprofilePage : val email\nprofilePage : val DOB\nprofilePage : onCreate()\nmapPage --\x3e mapAdapter \nmapAdapter : onCreate()\nmapAdapter : onStart()\nmapAdapter : onResume()\nmapAdapter : onPause()\nmapAdapter : onStop()\nmapAdapter : onDestroy()\nmapAdapter : onSaveInstanceState()\nmapAdapter : onLowMemory()\nnavBarAdapter <-- mapPage\nnavBarAdapter <-- filterPage\nnavBarAdapter <-- profilePage\nnavBarAdapter : onItemSelected()\nnavBarAdapter : onItemNotSelected()\nfilterPage  --\x3e DistanceAdapter\nDistanceAdapter : getCount()\nDistanceAdapter : getItem()\nDistanceAdapter : getItemId()\nDistanceAdapter : getView()\nfilterPage  --\x3e VehicleSizeAdapter\nVehicleSizeAdapter : getCount()\nVehicleSizeAdapter : getItem()\nVehicleSizeAdapter : getItemId()\nVehicleSizeAdapter : getView()\nfilterPage  --\x3e CostAdapter\nCostAdapter : getCount()\nCostAdapter : getItem()\nCostAdapter : getItemId()\nCostAdapter : getView()\nRegisterActivity <--\x3e DeviceInfoEndpoint\nDeviceInfoEndpoint: Autogenerated (Server Side)\nMainApp <--\x3e RegisterActivity \nRegisterActivity: Autogenerated (Client Side)\nmapPage <--\x3e activity_map_xml\nactivity_map_xml : View map\nactivity_map_xml : View editText\nactivity_map_xml : View button\nactivity_map_xml : View navbar\nactivity_map_xml : View logo\nfilterPage <--\x3e activity_filter_xml\nactivity_filter_xml : View distance\nactivity_filter_xml : View RadioButtonDistance\nactivity_filter_xml : View Size\nactivity_filter_xml : View RadioButtonSize\nactivity_filter_xml : View cost\nactivity_filter_xml : View RadioButtonCost\nactivity_filter_xml : View title\nactivity_filter_xml : View logo\nactivity_filter_xml : View navbar\nprofilePage <--\x3e acitivity_profile_xml\nacitivity_profile_xml : View name\nacitivity_profile_xml : View email\nacitivity_profile_xml : View accName\nacitivity_profile_xml : View DOB\nacitivity_profile_xml : View navbar\nacitivity_profile_xml : View logo\n    "}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Server"),"\nThe server will be hosted in Google Cloud with containers for the Customer database, and Parking database. "),(0,i.kt)("mermaid",{value:"flowchart TD\n    A[Container Manager] --\x3e B[Customer Database]--\x3eD[User Location]\n    A[Container Manager] --\x3e C[Parking Database]"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Database")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Uses Firebase to save customer information, location and availbe parking spots. "),(0,i.kt)("li",{parentName:"ul"},"Customer table contains CustomerId as the primary key, customer's email and password, and two foreign keys LocationId and ParkingSpotId. "),(0,i.kt)("li",{parentName:"ul"},"Path from CustomerInfo to Location table has LocationId as the primary key and also the user's longitude and latitude. "),(0,i.kt)("li",{parentName:"ul"},"Path from CustomerInfo to ParkingSpot, which had spotLocationId as the primary key and also the parkings spot's longitude, latitude, price and availability. ")),(0,i.kt)("mermaid",{value:"classDiagram\n    Customer -- Location\n    Customer -- ParkingSpot\n    class Customer{\n        +String userName\n        +String email\n        +string password\n        +int customerId\n        +int locationId\n        +int parkingLocationId\n        +findParkingSpot()\n    }\n    class Location{\n        +int locationId\n        -int lat\n        -int long\n    }\n    class ParkingSpot{\n        +int spotLocationId\n        -int lat\n        -int long\n        +int price\n        +boolean availability\n    }"}),(0,i.kt)("h3",{id:"sequence-diagrams"},"Sequence Diagrams"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use Case #1"),": User wants to find a spot in a general vicinity."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Use Case 1 Description"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"User opens parking options."),(0,i.kt)("li",{parentName:"ol"},"In parking options, user adjusts the range of how far they are willing to park in the area surrounding from their destination. "),(0,i.kt)("li",{parentName:"ol"},"User clicks the search button to find spots in an area."),(0,i.kt)("li",{parentName:"ol"},"User enters the address of their destination."),(0,i.kt)("li",{parentName:"ol"},"The TuTraffic application displays the detected spots in that range to the user's device."))),(0,i.kt)("mermaid",{value:"\nsequenceDiagram\n    actor u as User\n    participant m as Mobile Application\n    participant c as Cloud\n    participant d as Database\n    u ->> m: Open parking options page\n    activate m \n    u ->> m: Adjust range preferences\n    m ->> c: Range preferences\n    deactivate m\n    activate c \n    c ->> d: Range preferences\n    activate d \n    d ->> d: Update dataset\n    d --\x3e> c: Dataset of parking spots in range\n    deactivate d\n    c --\x3e> m: Dataset in readable form\n    deactivate c\n    activate m\n    m ->> m: Process dataset\n    m --\x3e> u: Display\n    deactivate m\n"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use Case #2"),": User wants displayed parking spots to reflect price preferences."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Use Case 2 Description"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"User opens parking options."),(0,i.kt)("li",{parentName:"ol"},"In parking options, user removes parking garages and paid lots from their preferences."),(0,i.kt)("li",{parentName:"ol"},"User edits their accepted hourly price range for street parking in parking options, reflecting how much they are willing to pay per hour."))),(0,i.kt)("mermaid",{value:"\nsequenceDiagram\n    actor u as User\n    participant m as Mobile Application\n    participant c as Cloud\n    participant d as Database\n    u ->> m: Open parking options page\n    activate m \n    u ->> m: Disable parking garages and paid lots\n    m ->> c: Pricing preferences\n    deactivate m\n    activate c \n    c ->> d: Pricing preferences\n    activate d \n    d ->> d: Update dataset\n    d --\x3e> c: Dataset of parking spots in price range\n    deactivate d\n    c --\x3e> m: Dataset in readable form\n    deactivate c\n    activate m\n    m ->> m: Process dataset\n    m --\x3e> u: Display\n    deactivate m\n"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use Case #3"),": User wants spots that can fit their car to be detected."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Use Case 3 Description"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"User opens parking options."),(0,i.kt)("li",{parentName:"ol"},"User selects the option that best reflects the size of their car from a dropdown menu."),(0,i.kt)("li",{parentName:"ol"},"The application sends a message to the server to communicate the unique size need."),(0,i.kt)("li",{parentName:"ol"},"The server transmits this information to the raspberry pi node."),(0,i.kt)("li",{parentName:"ol"},"The computer vision processing the video feed adjusts to make decisions on whether a spot exists in a space or not based on if the user's car size can fit there."))),(0,i.kt)("mermaid",{value:'\nsequenceDiagram\n    actor u as User\n    participant t as TuTraffic App\n    participant s as Server\n    participant p as Raspberry pi\n    participant c as Camera\n    participant d as Database\n    activate u\n    u ->>+ t: Opens parking options\n    t --\x3e> u: Displays dropdown menu of car size options\n    u ->> t: Selects size of vehicle\n    t ->>+ s: Requests parking data for "size"\n    s ->>+ p: Requests parking data for "size"\n    p ->>+ c: Adjusts computer vision processing for "size"\n    c --\x3e>- p: Sends video to be processed\n    p --\x3e>- s: Return parking data for "size"\n    s ->>+ d: Update parking data for "size"\n    d --\x3e>- s: Return\n    s --\x3e>- t: Return parking data for "size"\n    t --\x3e>- u: Display parking data for "size"\n    deactivate u\n'}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use Case #4"),": User wants be directed to a parking spot."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Use Case 4 Description"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"User clicks the search button to find parking spots."),(0,i.kt)("li",{parentName:"ol"},"User enters their destination's address."),(0,i.kt)("li",{parentName:"ol"},"The TuTraffic application displays the detected spots to the user's device."),(0,i.kt)("li",{parentName:"ol"},'User selects on a parking spot and clicks the "Route" button.'),(0,i.kt)("li",{parentName:"ol"},"Google Maps API is loaded to direct the user to their destination."))),(0,i.kt)("mermaid",{value:'\nsequenceDiagram\n    actor u as User\n    participant t as TuTraffic App\n    participant s as Server\n    participant d as Database\n    participant g as Google Maps API\n    activate u\n    u ->>+ t: Clicks search button\n    t --\x3e> u: Prompts to enter destination address\n    u ->> t: Enter address\n    t ->>+ s: Requests parking data for "destination"\n    s ->>+ d: Requests parking data for "destination"\n    d --\x3e>- s: Return parking data for "destination"\n    s --\x3e>- t: Return parking data for "destination"\n    t --\x3e> u: Display parking data for "destination"\n    u ->> t: Selects parking spot and request route\n    t ->>+ g: Requests navigation directions to the parking spot\n    g --\x3e>- t: Sends navigation directions to the parking spot\n    t --\x3e>- u: Direct navigation directions\n    deactivate u\n'}),(0,i.kt)("h3",{id:"algorithms"},"Algorithms"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Computer Vision")),(0,i.kt)("p",null,"The raspberry pi cameras will have their video feed processed through machine learning's subfield of computer vision in order to detect parking spots. Computer vision is meant to view photo or video feed and replicate the human thought process to make a decision based on what it \"sees\". TuTraffic's computer vision algorithm will be presented with visual data of both parking spots with painted lines on the ground and street parking that is less defined. This algorithm will then decide if there are any detectable parking spots in the video feed it is processing, how many there are, and where are they. "),(0,i.kt)("p",null,"Currently, there exists a computer vision algorithm trained to detect parking spots that TuTraffic will likely utilize. TuTraffic may further refine this algorithm to take into account varying car sizes and detect more ambiguous spots on the street that the current algorithm may not be trained to currently see. This would be done by presenting the computer vision algorithm with various datasets that contain such spots to train it."),(0,i.kt)("h3",{id:"state-diagrams"},"State Diagrams"),(0,i.kt)("mermaid",{value:"---\ntitle: Client State Diagram\n---\nstateDiagram-v2\n[*] --\x3e Searching\nSearching --\x3e Requesting\nRequesting --\x3e Searching\nSearching --\x3e Viewing: Select Parking Location\nViewing --\x3e Navigation\nViewing --\x3e Requesting\nRequesting --\x3e Viewing\nNavigation --\x3e Viewing\nViewing --\x3e Searching"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Figure. Client State Diagram")),(0,i.kt)("p",null,"The TuTraffic client application experiences multiple states throughout its usage. As depicted in the figure above, its first state is Searching: in this state, the client displays a list of nearby parking spaces, which may be initially empty. The client enters the Viewing state after the user selects a parking location; they can return to the Searching state to view the other locations, or enter the Navigation state. In either the Searching or Viewing State, the client submits requests to the server, such as parking status updates or reservations, in the Requesting state before returning to the previous state. In the Navigation state, the client connects to a third party navigation service and receives real-time driving assistance to help them reach their selected parking location. After the client reaches their destination or ceases navigation, the application returns to the Viewing state."),(0,i.kt)("mermaid",{value:"---\ntitle: Server State Diagram\n---\nstateDiagram-v2\n[*] --\x3e Waiting\nWaiting --\x3e Handling\nHandling --\x3e Reading\nHandling --\x3e Writing\nReading --\x3e Replying\nWriting --\x3e Replying\nReading --\x3e Writing\nWriting --\x3e Reading\nReplying --\x3e Waiting"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Figure. Server State Diagram")),(0,i.kt)("p",null,"The figure above illustrates the server states of the TuTraffic system. The server starts in the Waiting state; it is idle while there are no jobs to complete. When it receives a request from a client or node, the server proceeds to the Handling state, in which it comprehends the request. Then, the server enters a Reading or Writing state to handle the reading or writing operations, respectively, that are necessary to fulfill the request. For example, a search query is primarily a reading operation, while a parking reservation request is primarily a writing operation. Finally, the server formulates a response, delivers the message in the Replying state, and returns to the Waiting state before the next job."),(0,i.kt)("mermaid",{value:"---\ntitle: Node State Diagram\n---\nstateDiagram-v2\n[*] --\x3e Waiting\nWaiting --\x3e Capturing\nCapturing --\x3e Processing\nProcessing --\x3e Sending\nSending --\x3e Waiting"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Figure. Node State Diagram")),(0,i.kt)("p",null,"Each Raspberry Pi node in the TuTraffic system begins in the Waiting state, as shown in the above state diagram. The node exits this Waiting state on a regular schedule or upon request, then enters the Capturing state, during which it records an image. The node proceeds to the Processing state, in which computer vision is used to produce a parking location update message. This update is pushed to the server during the Sending state, then the node resumes the Waiting state."),(0,i.kt)("h3",{id:"database"},"Database"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Entity-Relation Diagram")),(0,i.kt)("mermaid",{value:"erDiagram\n    CUSTOMER }|..|{ Locations : has\n    CUSTOMER ||--o{ ParkingSpot : recieves\n    CUSTOMER {\n        int customerId\n        string email\n        string password\n        int locationID\n        int spotId\n    }\n    Locations{\n        int locationId\n        int long\n        int lat\n    }\n    ParkingSpot{\n        int spotId\n        int long\n        int lat\n        int price\n        boolean availability\n    }"}),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Table Design")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Customer Table: This table contain customer information including, email and password. The primary key is customerId. Contains 2 foreign keys locationId and spotID"),(0,i.kt)("li",{parentName:"ul"},"Location Table: This table updates in realtime with users longitude and latitude. The primary key is locationId."),(0,i.kt)("li",{parentName:"ul"},"ParkingSpot Table: This table contains the parking spots location, availability and longitude and latitude. Primary key is the spotId")))}d.isMDXComponent=!0},3549:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/wireframe-05f5aa4ff2e47e89cae3ca7eca49b503.png"}}]);